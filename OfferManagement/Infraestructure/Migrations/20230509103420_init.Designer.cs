// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230509103420_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationStatusTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationStatusTypeId")
                        .IsUnique();

                    b.HasIndex("OfferId");

                    b.ToTable("Application", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatusType", b =>
                {
                    b.Property<int>("ApplicationStatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationStatusTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ApplicationStatusTypeId");

                    b.ToTable("ApplicationStatusType", (string)null);

                    b.HasData(
                        new
                        {
                            ApplicationStatusTypeId = 1,
                            Name = "Postulado"
                        },
                        new
                        {
                            ApplicationStatusTypeId = 2,
                            Name = "CV Visto"
                        },
                        new
                        {
                            ApplicationStatusTypeId = 3,
                            Name = "En evaluación"
                        },
                        new
                        {
                            ApplicationStatusTypeId = 4,
                            Name = "Finalista"
                        },
                        new
                        {
                            ApplicationStatusTypeId = 5,
                            Name = "Proceso finalizado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Tecnología"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Marketing"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Diseño"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Administración"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Finanzas"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Recursos humanos"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Ventas"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Servicio al cliente"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Logística"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Producción"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Educación"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Salud"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Investigación"
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Arte y cultura"
                        },
                        new
                        {
                            CategoryId = 15,
                            Name = "Medios de comunicación"
                        },
                        new
                        {
                            CategoryId = 16,
                            Name = "Derecho"
                        },
                        new
                        {
                            CategoryId = 17,
                            Name = "Profesorado"
                        },
                        new
                        {
                            CategoryId = 18,
                            Name = "Ingeniería"
                        },
                        new
                        {
                            CategoryId = 19,
                            Name = "Mecànica"
                        },
                        new
                        {
                            CategoryId = 20,
                            Name = "Agricultura"
                        },
                        new
                        {
                            CategoryId = 21,
                            Name = "Medio ambiente"
                        },
                        new
                        {
                            CategoryId = 22,
                            Name = "Gastronomía"
                        },
                        new
                        {
                            CategoryId = 23,
                            Name = "Gestión de proyectos"
                        },
                        new
                        {
                            CategoryId = 24,
                            Name = "Consultoría"
                        },
                        new
                        {
                            CategoryId = 25,
                            Name = "Análisis de datos"
                        },
                        new
                        {
                            CategoryId = 26,
                            Name = "Química"
                        },
                        new
                        {
                            CategoryId = 27,
                            Name = "Medicina"
                        },
                        new
                        {
                            CategoryId = 28,
                            Name = "Enfermería"
                        },
                        new
                        {
                            CategoryId = 29,
                            Name = "Psicología"
                        },
                        new
                        {
                            CategoryId = 30,
                            Name = "Trabajo social"
                        },
                        new
                        {
                            CategoryId = 31,
                            Name = "Arquitectura"
                        },
                        new
                        {
                            CategoryId = 32,
                            Name = "Fotografía"
                        },
                        new
                        {
                            CategoryId = 33,
                            Name = "Estadística"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExperienceId");

                    b.ToTable("Experience", (string)null);

                    b.HasData(
                        new
                        {
                            ExperienceId = 1,
                            Name = "Sin Experiencia"
                        },
                        new
                        {
                            ExperienceId = 2,
                            Name = "1 Año"
                        },
                        new
                        {
                            ExperienceId = 3,
                            Name = "2 Años"
                        },
                        new
                        {
                            ExperienceId = 4,
                            Name = "3 Años"
                        },
                        new
                        {
                            ExperienceId = 5,
                            Name = "4 Años"
                        },
                        new
                        {
                            ExperienceId = 6,
                            Name = "5 Años"
                        },
                        new
                        {
                            ExperienceId = 7,
                            Name = "6 Años"
                        },
                        new
                        {
                            ExperienceId = 8,
                            Name = "7 Años"
                        },
                        new
                        {
                            ExperienceId = 9,
                            Name = "8 Años"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Offer", b =>
                {
                    b.Property<Guid>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StudyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OfferId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("StudyLevelId");

                    b.ToTable("Offer", (string)null);

                    b.HasData(
                        new
                        {
                            OfferId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            CityId = 60091,
                            CompanyId = 1,
                            Date = new DateTime(2023, 4, 22, 8, 5, 19, 374, DateTimeKind.Unspecified).AddTicks(9336),
                            Description = "Buscamos Desarrollador .NET Junior/Ssr. para sumarse a importante empresa de producto IT, líder en la creación de soluciones para el sector de salud.",
                            ExperienceId = 3,
                            ProvinceId = 6,
                            Salary = 200000,
                            Status = true,
                            StudyLevelId = 4,
                            Title = "Desarrollador .NET Junior/Ssr."
                        },
                        new
                        {
                            OfferId = new Guid("f1b4f44e-05fb-4062-a247-6830964ef063"),
                            CityId = 60658,
                            CompanyId = 2,
                            Date = new DateTime(2023, 3, 22, 8, 4, 50, 928, DateTimeKind.Unspecified).AddTicks(6762),
                            Description = "Buscamos Desarrollador .NET Junior/Ssr. para sumarse a importante empresa de producto IT, líder en la creación de soluciones para el sector de salud.",
                            ExperienceId = 1,
                            ProvinceId = 6,
                            Salary = 120000,
                            Status = true,
                            StudyLevelId = 3,
                            Title = "Desarrollador .NET Junior."
                        },
                        new
                        {
                            OfferId = new Guid("ee69bf0e-735f-44ff-9712-96830fddbf3a"),
                            CityId = 60560,
                            CompanyId = 2,
                            Date = new DateTime(2023, 4, 23, 8, 5, 19, 374, DateTimeKind.Unspecified).AddTicks(9336),
                            Description = "Buscamos AUXLIAR DE OPERACIONES SISTEMAS.",
                            ExperienceId = 1,
                            ProvinceId = 6,
                            Salary = 150000,
                            Status = true,
                            StudyLevelId = 4,
                            Title = "Analista programador/a de sistemas."
                        },
                        new
                        {
                            OfferId = new Guid("3da7995a-715f-40b8-8121-b2ffdee778b0"),
                            CityId = 60274,
                            CompanyId = 2,
                            Date = new DateTime(2023, 5, 22, 12, 13, 20, 71, DateTimeKind.Unspecified).AddTicks(9537),
                            Description = "Buscamos Desarrollador SQL Server Junior/SSR. para sumarse a importante empresa de producto IT, líder en la creación de soluciones para el sector de salud.",
                            ExperienceId = 3,
                            ProvinceId = 6,
                            Salary = 220000,
                            Status = true,
                            StudyLevelId = 4,
                            Title = "Desarrollador SQL Server Jr/SSr"
                        },
                        new
                        {
                            OfferId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            CityId = 60091,
                            CompanyId = 3,
                            Date = new DateTime(2023, 3, 22, 12, 11, 59, 975, DateTimeKind.Unspecified).AddTicks(193),
                            Description = "En Ecosistemas, buscamos un Desarrollador Java Jr/Ssr para sumar al equipo de nuestro cliente, en relación directa con el mismo.",
                            ExperienceId = 1,
                            ProvinceId = 6,
                            Salary = 180000,
                            Status = true,
                            StudyLevelId = 2,
                            Title = "Desarrollador Java Jr."
                        },
                        new
                        {
                            OfferId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            CityId = 60091,
                            CompanyId = 3,
                            Date = new DateTime(2023, 4, 22, 8, 5, 20, 446, DateTimeKind.Unspecified).AddTicks(6304),
                            Description = "En Ecosistemas estamos en la búsqueda de un Administrador de Backups Ssr/Sr para sumarse a nuestro equipo",
                            ExperienceId = 3,
                            ProvinceId = 6,
                            Salary = 250000,
                            Status = true,
                            StudyLevelId = 3,
                            Title = "Administrador de Infraestructura Ssr."
                        },
                        new
                        {
                            OfferId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            CityId = 60147,
                            CompanyId = 3,
                            Date = new DateTime(2023, 4, 22, 7, 50, 18, 989, DateTimeKind.Unspecified).AddTicks(830),
                            Description = "Desde Ecosistemas nos encontramos en la búsqueda de un Analista Funcional Jr/Ssr, para sumarse al equipo de nuestro cliente, empresa agropecuaria.",
                            ExperienceId = 2,
                            ProvinceId = 6,
                            Salary = 200000,
                            Status = true,
                            StudyLevelId = 3,
                            Title = "Analista Funcional Jr o Ssr."
                        },
                        new
                        {
                            OfferId = new Guid("1d394678-e0eb-4620-a1de-f01c7768ddb3"),
                            CityId = 60091,
                            CompanyId = 1,
                            Date = new DateTime(2023, 4, 22, 10, 27, 32, 895, DateTimeKind.Unspecified).AddTicks(6499),
                            Description = "Importante empresa Autopartista se encuentra en la búsqueda de Programador Robotista.",
                            ExperienceId = 2,
                            ProvinceId = 6,
                            Salary = 200000,
                            Status = true,
                            StudyLevelId = 4,
                            Title = "Programador Robotista."
                        },
                        new
                        {
                            OfferId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            CityId = 60441,
                            CompanyId = 4,
                            Date = new DateTime(2023, 4, 23, 10, 27, 32, 895, DateTimeKind.Unspecified).AddTicks(6499),
                            Description = "Estamos en la búsqueda de Responsable general para empresa con negocios en rubro inmobiliario y de playas de estacionamiento.",
                            ExperienceId = 3,
                            ProvinceId = 6,
                            Salary = 200000,
                            Status = true,
                            StudyLevelId = 5,
                            Title = "Administrador/ Contador."
                        });
                });

            modelBuilder.Entity("Domain.Entities.OfferCategory", b =>
                {
                    b.Property<int>("OfferCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("OfferCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferCategory", (string)null);

                    b.HasData(
                        new
                        {
                            OfferCategoryId = 1,
                            CategoryId = 1,
                            OfferId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 2,
                            CategoryId = 3,
                            OfferId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 3,
                            CategoryId = 1,
                            OfferId = new Guid("f1b4f44e-05fb-4062-a247-6830964ef063"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 4,
                            CategoryId = 3,
                            OfferId = new Guid("f1b4f44e-05fb-4062-a247-6830964ef063"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 5,
                            CategoryId = 1,
                            OfferId = new Guid("ee69bf0e-735f-44ff-9712-96830fddbf3a"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 6,
                            CategoryId = 25,
                            OfferId = new Guid("ee69bf0e-735f-44ff-9712-96830fddbf3a"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 7,
                            CategoryId = 33,
                            OfferId = new Guid("e058b366-f832-42dd-b001-647919fdfd66"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 8,
                            CategoryId = 25,
                            OfferId = new Guid("3da7995a-715f-40b8-8121-b2ffdee778b0"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 9,
                            CategoryId = 33,
                            OfferId = new Guid("3da7995a-715f-40b8-8121-b2ffdee778b0"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 10,
                            CategoryId = 23,
                            OfferId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 11,
                            CategoryId = 25,
                            OfferId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 12,
                            CategoryId = 33,
                            OfferId = new Guid("994ec6d1-3560-4fc6-be23-e078def32527"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 13,
                            CategoryId = 4,
                            OfferId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 14,
                            CategoryId = 18,
                            OfferId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 15,
                            CategoryId = 23,
                            OfferId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 16,
                            CategoryId = 25,
                            OfferId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 17,
                            CategoryId = 31,
                            OfferId = new Guid("4093643c-135b-4368-ace5-e1783dd3f0f8"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 18,
                            CategoryId = 1,
                            OfferId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 19,
                            CategoryId = 4,
                            OfferId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 20,
                            CategoryId = 25,
                            OfferId = new Guid("8a527fd3-962a-4abf-b18f-efcdb6004f07"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 21,
                            CategoryId = 18,
                            OfferId = new Guid("1d394678-e0eb-4620-a1de-f01c7768ddb3"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 22,
                            CategoryId = 19,
                            OfferId = new Guid("1d394678-e0eb-4620-a1de-f01c7768ddb3"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 23,
                            CategoryId = 4,
                            OfferId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 24,
                            CategoryId = 5,
                            OfferId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            Status = true
                        },
                        new
                        {
                            OfferCategoryId = 25,
                            CategoryId = 24,
                            OfferId = new Guid("3b4010d9-e137-465d-9a4b-d97b28b87bbe"),
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.StudyLevel", b =>
                {
                    b.Property<int>("StudyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudyLevelId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudyLevelId");

                    b.ToTable("StudyLevel", (string)null);

                    b.HasData(
                        new
                        {
                            StudyLevelId = 1,
                            Name = "Primaria"
                        },
                        new
                        {
                            StudyLevelId = 2,
                            Name = "Secundaria"
                        },
                        new
                        {
                            StudyLevelId = 3,
                            Name = "Terciario"
                        },
                        new
                        {
                            StudyLevelId = 4,
                            Name = "Universitario"
                        },
                        new
                        {
                            StudyLevelId = 5,
                            Name = "Posgrado"
                        },
                        new
                        {
                            StudyLevelId = 6,
                            Name = "Master"
                        },
                        new
                        {
                            StudyLevelId = 7,
                            Name = "Doctorado"
                        },
                        new
                        {
                            StudyLevelId = 8,
                            Name = "Sin estudios"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Application", b =>
                {
                    b.HasOne("Domain.Entities.ApplicationStatusType", "ApplicationStatusType")
                        .WithOne("Application")
                        .HasForeignKey("Domain.Entities.Application", "ApplicationStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Offer", "Offer")
                        .WithMany("Application")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationStatusType");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Domain.Entities.Offer", b =>
                {
                    b.HasOne("Domain.Entities.Experience", "Experience")
                        .WithMany("Offer")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StudyLevel", "StudyLevel")
                        .WithMany("Offer")
                        .HasForeignKey("StudyLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("StudyLevel");
                });

            modelBuilder.Entity("Domain.Entities.OfferCategory", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("OfferCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Offer", "Offer")
                        .WithMany("OfferCategory")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Domain.Entities.ApplicationStatusType", b =>
                {
                    b.Navigation("Application")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("OfferCategory");
                });

            modelBuilder.Entity("Domain.Entities.Experience", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("Domain.Entities.Offer", b =>
                {
                    b.Navigation("Application");

                    b.Navigation("OfferCategory");
                });

            modelBuilder.Entity("Domain.Entities.StudyLevel", b =>
                {
                    b.Navigation("Offer");
                });
#pragma warning restore 612, 618
        }
    }
}
